/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst darkTheme = document.querySelector('.wrapper__dark');\r\nconst postList = document.querySelector('.posts');\r\nconst saveButtonProfile = document.querySelector('.module__save-profile');\r\nconst saveButtonPost = document.querySelector('.module__save-post');\r\nconst changeButton = document.querySelector('.info__change');\r\nconst addButton = document.querySelector('.profile__add');\r\n// const post = [JSON.parse(localStorage.getItem('posts'))]\r\n// console.log(post)\r\n//ИЗМЕНЕНИЯ ПРОФИЛЯ\r\n//Получаем информацию о профиле с хранилища.\r\nconst fetchData = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    const data = {\r\n        name: localStorage.name || 'Denis',\r\n        desc: localStorage.desc || 'Genuis',\r\n        img: localStorage.image || 'https://m-chu.ru/wp-content/uploads/2019/04/s1200-7.jpg'\r\n    };\r\n    return data;\r\n});\r\n//Изменяем элементы профиля.\r\nconst changeProfileInfo = (name, desc, image, data) => {\r\n    name.textContent = data.name;\r\n    desc.textContent = data.desc;\r\n    image.src = data.img;\r\n};\r\n//Отображаем элементы профиля.\r\nconst renderProfileInfo = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    const name = document.querySelector('.infoText__name-text');\r\n    const desc = document.querySelector('.infoText__desc-text');\r\n    const image = document.querySelector('.photo');\r\n    const data = yield fetchData();\r\n    changeProfileInfo(name, desc, image, data);\r\n    console.log(localStorage);\r\n});\r\n//Очищаем поля ввода.\r\nconst clearInfoInput = () => {\r\n    const moduleInput = document.querySelector('.module__input');\r\n    moduleInput.value = '';\r\n};\r\n//Получаем информацию о пользователе .\r\nconst getProfileInfo = () => {\r\n    const name = document.querySelector('.inputName');\r\n    const desc = document.querySelector('.inputDesc');\r\n    const image = document.querySelector('.inputImgUrl');\r\n    return user = {\r\n        name: name.value || 'Denis',\r\n        desc: desc.value || 'Genius',\r\n        image: image.value || 'https://m-chu.ru/wp-content/uploads/2019/04/s1200-7.jpg',\r\n        id: 1\r\n    };\r\n};\r\n//Сохраняем данные в хранилище и отображаем их.\r\nconst postNewInfo = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    const user = getProfileInfo();\r\n    localStorage.setItem('name', user.name);\r\n    localStorage.setItem('desc', user.desc);\r\n    localStorage.setItem('image', user.image);\r\n    console.log(localStorage);\r\n    renderProfileInfo();\r\n});\r\n//Изменения постов\r\nconst postElement = (city, image, id) => {\r\n    const item = document.createElement('div');\r\n    item.classList.add(`itemId${id}`);\r\n    item.classList.add('post__item');\r\n    item.innerHTML = ` \r\n      <img src='./src/assets/img/Close.png' class=\"close-icon\">\r\n            <div class=\"item__photo\">\r\n               <img\r\n                  src=${image}\r\n                  alt=\"photo\" class=\"item__photo-img\">\r\n            </div>\r\n            <div class=\"item__desc\">\r\n               <span class=\"desc__name\">${city}</span>\r\n               <button class=\"desc__favorite\">\r\n                  <img src=\"./src/assets/img/favorite.png\" alt=\"favorite icon\">\r\n               </button>\r\n            </div>\r\n   `;\r\n    return item;\r\n};\r\n//Добавление поста в хранилище \r\nconst addPost = () => {\r\n    const name = document.querySelector('.inputCity');\r\n    const image = document.querySelector('.inputImage');\r\n    const postsData = localStorage.getItem('posts');\r\n    if (name.value && image.value) {\r\n        if (postsData) {\r\n            const posts = JSON.parse(localStorage.getItem('posts'));\r\n            const id = new Date().getMilliseconds();\r\n            posts.push({ id: id, name: name.value, image: image.value });\r\n            localStorage.setItem('posts', JSON.stringify(posts));\r\n            console.log(localStorage.getItem('posts'));\r\n        }\r\n        else {\r\n            const id = new Date().getMilliseconds();\r\n            const posts = [];\r\n            posts.push({ id, name: name.value, image: image.value });\r\n            localStorage.setItem('posts', JSON.stringify(posts));\r\n            console.log(localStorage.getItem('posts'));\r\n        }\r\n    }\r\n    setPost();\r\n};\r\nconst setPost = () => {\r\n    postList.innerHTML = '';\r\n    const posts = JSON.parse(localStorage.getItem('posts'));\r\n    if (posts) {\r\n        posts.forEach(item => {\r\n            render(postList, postElement(item.name, item.image, item.id));\r\n            const deleteButton = document.querySelector(`.itemId${item.id} .close-icon`);\r\n            deleteButton.addEventListener('click', () => deletePost(item.id));\r\n        });\r\n    }\r\n};\r\nconst deletePost = (id) => {\r\n    const posts = JSON.parse(localStorage.getItem('posts')).filter(el => id !== el.id);\r\n    localStorage.setItem('posts', JSON.stringify(posts));\r\n    addPost();\r\n};\r\nconsole.log(localStorage.getItem('posts'));\r\n//Модальные окна\r\nconst openProfileModule = () => {\r\n    const module = document.querySelector('.module-profile');\r\n    module.style.display = 'block';\r\n};\r\nconst closeProfileModule = () => {\r\n    const module = document.querySelector('.module-profile');\r\n    module.style.display = 'none';\r\n};\r\nconst openPostModule = () => {\r\n    const module = document.querySelector('.module-post');\r\n    module.style.display = 'block';\r\n};\r\nconst closePostModule = () => {\r\n    const module = document.querySelector('.module-post');\r\n    module.style.display = 'none';\r\n};\r\nconst render = (container, item) => {\r\n    container.append(item);\r\n};\r\nconst onClickChange = () => {\r\n    darkTheme.style.display = 'block';\r\n    openProfileModule();\r\n};\r\nconst onClickSaveProfile = () => {\r\n    darkTheme.style.display = 'none';\r\n    closeProfileModule();\r\n    postNewInfo();\r\n    clearInfoInput();\r\n};\r\nconst onClickSavePost = () => {\r\n    darkTheme.style.display = 'none';\r\n    addPost();\r\n    closePostModule();\r\n    clearInfoInput();\r\n};\r\nconst onClickAdd = () => {\r\n    darkTheme.style.display = 'block';\r\n    openPostModule();\r\n};\r\nconst renderPage = () => {\r\n    renderProfileInfo;\r\n    addPost();\r\n};\r\naddButton.addEventListener('click', onClickAdd);\r\nsaveButtonProfile.addEventListener('click', onClickSaveProfile);\r\nsaveButtonPost.addEventListener('click', onClickSavePost);\r\nchangeButton.addEventListener('click', onClickChange);\r\nwindow.onload = renderPage();\r\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;